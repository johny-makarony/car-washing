{"version":3,"file":"static/js/296.c356490b.chunk.js","mappings":"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","sources":["components/AdminPage/OrderServicesItem/OrderServicesItem.styled.jsx","components/AdminPage/OrderServicesItem/OrderServicesItem.jsx","components/AdminPage/Modals/ModaAddServiceToOrder/ModaAddServiceToOrder.jsx","components/AdminPage/Modals/ModalUpdateOrderStatus/ModalUpdateOrderStatus.jsx","components/AdminPage/Modals/ModalAddDiscount/ModalAddDiscount.jsx","components/AdminPage/OrderCard/OrderCard.jsx","pages/OrderPage/OrderPage.jsx","redux/employees/employeesSelectors.js","redux/orders/ordersSelectors.js","redux/services/servicesSelectors.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ServiceItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const ServiceRightSide = styled.div`\n  display: flex;\n`;\n\nexport const ServiceText = styled.p``;\n\nexport const AmountForm = styled.form`\n  display: flex;\n  gap: 8px;\n`;\n\nexport const DeleteButton = styled.button`\n  background-color: transparent;\n  border: none;\n  margin-left: 8px;\n  color: red;\n`;\n\nexport const AmountInput = styled.input`\n  width: 50px;\n`;\n\nexport const SubmitButton = styled.button``;\n","import { useFormik } from 'formik';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { selectOrderByNumber } from 'redux/orders/ordersSelectors';\nimport { updateOrderByNumber } from 'redux/orders/ordersOperations';\n\nimport {\n  ServiceItem,\n  ServiceRightSide,\n  ServiceText,\n  DeleteButton,\n  AmountForm,\n  AmountInput,\n  SubmitButton,\n} from './OrderServicesItem.styled';\nimport { BsFillTrash3Fill } from 'react-icons/bs';\n\nexport const OrderServicesItem = props => {\n  const { service: currentService } = props;\n  const order = useSelector(selectOrderByNumber);\n\n  const dispatch = useDispatch();\n\n  const handleDeleteService = serviceId => {\n    const updatedServices = order.services.filter(\n      service => service._id !== serviceId\n    );\n    const data = { services: updatedServices };\n    dispatch(updateOrderByNumber({ number: order.orderNumber, data }));\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      amount: currentService.amount || '1',\n    },\n    onSubmit: values => {\n      const filteredServices = order.services.filter(\n        service => service._id !== currentService._id\n      );\n      const data = {\n        services: [...filteredServices, { ...currentService, ...values }],\n      };\n      dispatch(updateOrderByNumber({ number: order.orderNumber, data }));\n    },\n  });\n\n  const amount = currentService.amount ? currentService.amount : 1;\n\n  return (\n    <ServiceItem>\n      <ServiceText>{currentService.name}</ServiceText>\n      {currentService.pricePerMeter === 'Так' && (\n        <AmountForm onSubmit={formik.handleSubmit}>\n          <label>\n            <AmountInput\n              required\n              id=\"amount\"\n              name=\"amount\"\n              value={formik.values.amount}\n              onChange={formik.handleChange}\n              type=\"number\"\n              min=\"1\"\n            />{' '}\n            м²\n          </label>\n          <SubmitButton type=\"submit\">Зберегти</SubmitButton>\n        </AmountForm>\n      )}\n\n      <ServiceRightSide>\n        <ServiceText>{`${currentService.price * amount} грн`}</ServiceText>\n        <DeleteButton\n          type=\"button\"\n          onClick={() => handleDeleteService(currentService._id)}\n        >\n          <BsFillTrash3Fill />\n        </DeleteButton>\n      </ServiceRightSide>\n    </ServiceItem>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useFormik } from 'formik';\n\nimport { Backdrop, Modal, Form, Title, CloseButton } from '../Modal.styles';\nimport { Select, MenuItem } from '@mui/material';\n\nimport { getAllServices } from 'redux/services/servicesOperations';\nimport { selectGetAllServices } from 'redux/services/servicesSelectors';\nimport { selectOrderByNumber } from 'redux/orders/ordersSelectors';\n\nimport { updateOrderByNumber } from 'redux/orders/ordersOperations';\n\nexport const ModaAddServiceToOrder = props => {\n  const services = useSelector(selectGetAllServices);\n  const order = useSelector(selectOrderByNumber);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getAllServices());\n  }, [dispatch]);\n\n  const handleAddService = ({ service }) => {\n    const updatedServices = [...order.services, service];\n    const data = { services: updatedServices };\n    dispatch(updateOrderByNumber({ number: order.orderNumber, data }));\n  };\n\n  const handleExitModal = () => {\n    props.handleExitModal(true);\n  };\n\n  const handleBackdropClick = e => {\n    if (e.target === e.currentTarget) {\n      handleExitModal(true);\n    }\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      service: '',\n    },\n    onSubmit: values => {\n      handleAddService(values);\n      handleExitModal();\n    },\n  });\n\n  return (\n    <Backdrop onClick={handleBackdropClick}>\n      <Modal>\n        <CloseButton type=\"button\" onClick={handleExitModal}>\n          Закрити\n        </CloseButton>\n        <Form onSubmit={formik.handleSubmit}>\n          <Title>Оберіть послугу</Title>\n          <Select\n            required\n            id=\"service\"\n            name=\"service\"\n            value={formik.values.service}\n            onChange={formik.handleChange}\n            variant=\"standard\"\n            style={{ width: '100%' }}\n          >\n            {services.map(service => (\n              <MenuItem value={service} key={service._id}>\n                {`${service.category}. ${service.name}. ${service.price}грн`}\n              </MenuItem>\n            ))}\n          </Select>\n          <button type=\"submit\" className=\"btn\">\n            Додати\n          </button>\n        </Form>\n      </Modal>\n    </Backdrop>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { useFormik } from 'formik';\n\nimport { Backdrop, Modal, Form, Title, CloseButton } from '../Modal.styles';\nimport { Select, MenuItem } from '@mui/material';\nimport { updateOrderByNumber } from 'redux/orders/ordersOperations';\n\nexport const ModalUpdateOrderStatus = props => {\n  const { handleExitModal, orderNumber } = props;\n  const dispatch = useDispatch();\n\n  const handleBackdropClick = e => {\n    if (e.target === e.currentTarget) {\n      handleExitModal(true);\n    }\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      status: '',\n    },\n    onSubmit: values => {\n      const data = { ...values };\n      dispatch(updateOrderByNumber({ number: orderNumber, data }));\n      handleExitModal(true);\n    },\n  });\n\n  return (\n    <Backdrop onClick={handleBackdropClick}>\n      <Modal>\n        <CloseButton type=\"button\" onClick={handleExitModal}>\n          Закрити\n        </CloseButton>\n        <Form onSubmit={formik.handleSubmit}>\n          <Title>Оберіть статус</Title>\n          <Select\n            required\n            id=\"status\"\n            name=\"status\"\n            value={formik.values.status}\n            onChange={formik.handleChange}\n            variant=\"standard\"\n            style={{ width: '100%' }}\n          >\n            <MenuItem value=\"В роботі\"> В роботі </MenuItem>\n            <MenuItem value=\"Виконане\"> Виконане </MenuItem>\n            <MenuItem value=\"Скасоване\"> Скасоване </MenuItem>\n          </Select>\n          <button type=\"submit\" className=\"btn\">\n            Змінити\n          </button>\n        </Form>\n      </Modal>\n    </Backdrop>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useFormik } from 'formik';\n\nimport { Backdrop, Modal, Form, Title, CloseButton } from '../Modal.styles';\nimport { TextField } from '@mui/material';\n\nimport { selectOrderByNumber } from 'redux/orders/ordersSelectors';\nimport { updateOrderByNumber } from 'redux/orders/ordersOperations';\n\nexport const ModalAddDiscount = props => {\n  const order = useSelector(selectOrderByNumber);\n\n  const dispatch = useDispatch();\n\n  const handleExitModal = () => {\n    props.handleExitModal(true);\n  };\n\n  const handleBackdropClick = e => {\n    if (e.target === e.currentTarget) {\n      handleExitModal(true);\n    }\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      discountPercent: '',\n    },\n    onSubmit: values => {\n      dispatch(\n        updateOrderByNumber({ number: order.orderNumber, data: { ...values } })\n      );\n      handleExitModal();\n    },\n  });\n\n  return (\n    <Backdrop onClick={handleBackdropClick}>\n      <Modal>\n        <CloseButton type=\"button\" onClick={handleExitModal}>\n          Закрити\n        </CloseButton>\n        <Form onSubmit={formik.handleSubmit}>\n          <Title>Додати знижку</Title>\n          <TextField\n            required\n            type=\"text\"\n            id=\"discountPercent\"\n            name=\"discountPercent\"\n            label=\"Відсоток знижки\"\n            value={formik.values.discountPercent}\n            onChange={formik.handleChange}\n            variant=\"standard\"\n            className=\"field\"\n          />\n          <button type=\"submit\" className=\"btn\">\n            Додати\n          </button>\n        </Form>\n      </Modal>\n    </Backdrop>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { useFormik } from 'formik';\n\nimport { Select, MenuItem } from '@mui/material';\n\nimport { OrderServicesItem } from '../OrderServicesItem/OrderServicesItem';\nimport { ModaAddServiceToOrder } from '../Modals/ModaAddServiceToOrder/ModaAddServiceToOrder';\nimport { ModalUpdateOrderStatus } from '../Modals/ModalUpdateOrderStatus/ModalUpdateOrderStatus';\nimport { ModalAddDiscount } from '../Modals/ModalAddDiscount/ModalAddDiscount';\n\nimport {\n  getOrderByNumber,\n  updateOrderByNumber,\n} from 'redux/orders/ordersOperations';\nimport { getAllEmployees } from 'redux/employees/employeesOperations';\nimport {\n  selectEmployees,\n  selectIsLoadingEmployees,\n} from 'redux/employees/employeesSelectors';\nimport {\n  selectIsLoadingOrders,\n  selectOrderByNumber,\n} from 'redux/orders/ordersSelectors';\n\nexport const OrderCard = () => {\n  const [isEdit, setEdit] = useState(false);\n  const [isOpenModalServices, setOpenModalServices] = useState(false);\n  const [isOpenModalStatus, setOpenModalStatus] = useState(false);\n  const [isOpenModalDiscount, setOpenModalDiscount] = useState(false);\n\n  const order = useSelector(selectOrderByNumber);\n  const employees = useSelector(selectEmployees);\n  const isLoadingOrder = useSelector(selectIsLoadingOrders);\n  const isLoadingEmployees = useSelector(selectIsLoadingEmployees);\n\n  const { id: number } = useParams();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getAllEmployees());\n    dispatch(getOrderByNumber(number));\n  }, [dispatch, number]);\n\n  const handleExitModal = () => {\n    setOpenModalServices(false);\n    setOpenModalStatus(false);\n    setOpenModalDiscount(false);\n  };\n\n  const statusStyles = () => {\n    if (order.status === 'Нове') {\n      return 'status__btn status__btn--new';\n    } else if (order.status === 'В роботі') {\n      return 'status__btn status__btn--in-process';\n    } else if (order.status === 'Скасоване') {\n      return 'status__btn status__btn--canceled';\n    } else {\n      return 'status__btn status__btn--completed';\n    }\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      washer: '',\n    },\n    onSubmit: values => {\n      const data = { ...values };\n      dispatch(updateOrderByNumber({ number, data }));\n      setEdit(false);\n    },\n  });\n\n  if (isLoadingOrder || isLoadingEmployees) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"order\">\n      <div className=\"info__container\">\n        <div className=\"status__container\">\n          <h2>{`Замовлення: ${order.orderNumber}`}</h2>\n\n          <form\n            onSubmit={formik.handleSubmit}\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n              columnGap: '8px',\n            }}\n          >\n            <label\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                columnGap: '8px',\n              }}\n            >\n              Працівник: {!isEdit && order.washer}\n              {isEdit && (\n                <Select\n                  required\n                  id=\"washer\"\n                  name=\"washer\"\n                  value={formik.values.washer}\n                  onChange={formik.handleChange}\n                  disabled={!isEdit}\n                  variant=\"standard\"\n                >\n                  {employees &&\n                    employees.map(employee => (\n                      <MenuItem value={employee.name} key={employee._id}>\n                        {employee.name}\n                      </MenuItem>\n                    ))}\n                </Select>\n              )}\n            </label>\n            <button type=\"button\" onClick={() => setEdit(!isEdit)}>\n              {isEdit ? 'Скасувати' : 'Змінити'}\n            </button>\n            <button type=\"submit\" disabled={!isEdit}>\n              Зберегти\n            </button>\n          </form>\n\n          <button\n            type=\"button\"\n            onClick={() => setOpenModalStatus(true)}\n            className={statusStyles(order.status)}\n          >\n            {order.status}\n          </button>\n          {isOpenModalStatus && (\n            <ModalUpdateOrderStatus\n              handleExitModal={handleExitModal}\n              orderNumber={order.orderNumber}\n            />\n          )}\n        </div>\n\n        {order.urgently && <b>Терміново!</b>}\n        {order.clientComment && (\n          <p>{`Коментар клієнта: ${order.clientComment}`}</p>\n        )}\n        <p>{`Клієнт: ${order.clientName}`}</p>\n        <p>{`Контакти: ${order.clientPhone}`}</p>\n        <p>{`Об'єкт замовлення: ${order.serviceObject}`}</p>\n        <p>{`Дата та час послуги: ${order.orderDate}`}</p>\n        {order.orderExecutionDate && (\n          <p>{`Дата та час виконання: ${order.orderExecutionDate}`}</p>\n        )}\n      </div>\n\n      <div className=\"order__block\">\n        <h3 className=\"order__title\">Послуги:</h3>\n        <ul className=\"list order__list\">\n          {order.services &&\n            order.services.map(service => (\n              <OrderServicesItem key={service._id} service={service} />\n            ))}\n        </ul>\n        <button\n          type=\"button\"\n          onClick={() => setOpenModalServices(true)}\n          className={'order__btn--add'}\n        >\n          Додати послугу\n        </button>\n        {isOpenModalServices && (\n          <ModaAddServiceToOrder handleExitModal={handleExitModal} />\n        )}\n      </div>\n\n      <div className=\"order__block\">\n        <h3 className=\"order__title\">Розрахунок:</h3>\n        <ul className=\"list order__list\">\n          <li className=\"order__list-item\">\n            <p className=\"order__calculation\">Загальна вартість:</p>\n            <p>{`${order.totalCostOrder} грн`}</p>\n          </li>\n          <li className=\"order__list-item\">\n            <p className=\"order__calculation\">Вартість зі знижкою:</p>\n            <p>{`${order.discountedCostOrder} грн`}</p>\n          </li>\n          <li className=\"order__list-item\">\n            <p className=\"order__calculation\">Виплата працівнику:</p>\n            <p>{`${order.washerPayment} грн`}</p>\n          </li>\n          <li className=\"order__list-item\">\n            <p className=\"order__calculation\">Виплата адміністратору:</p>\n            <p>{`${order.administratorPayment} грн`}</p>\n          </li>\n          <li className=\"order__list-item\">\n            <p className=\"order__calculation\">Залишок:</p>\n            <p>{`${order.revenue} грн`}</p>\n          </li>\n        </ul>\n        <button\n          type=\"button\"\n          onClick={() => setOpenModalDiscount(true)}\n          className=\"order__btn--add\"\n        >\n          Додати знижку\n        </button>\n        {isOpenModalDiscount && (\n          <ModalAddDiscount handleExitModal={handleExitModal} />\n        )}\n      </div>\n    </div>\n  );\n};\n","import { OrderCard } from 'components/AdminPage/OrderCard/OrderCard';\n\nconst OrderPage = () => {\n  return <OrderCard />;\n};\n\nexport default OrderPage;\n","export const selectEmployees = state => state.employees.items;\n\nexport const selectIsLoadingEmployees = state => state.employees.isLoading;\n","// бере зі стейту оголошення по категорії\nexport const selectOrders = state => state.orders.items;\n\n// Отримуємо замовлення по номеру\nexport const selectOrderByNumber = state => state.orders.orderByNumber;\n\n// Отримуємо статус завантаження\nexport const selectIsLoadingOrders = state => state.orders.isLoading;\n\n// бере зі стейту кількість сторінок у відповіді\n// export const selectTotalPages = state => state.notices.totalPages;\n// бере зі стейту чи завантажується\n// export const selectIsNoticeLoading = state => state.notices.isLoading;\n// export const selectCategory = state => state.notices.category;\n// export const selectIsFavorite = state => state.notices.isFavorite;\n\n// export const selectNotice = state => state.notices.notice;\n\n// export const selectNoticesFavorite = state => state.notices.noticesFavorite;\n\n// export const selectNoticesMyAds = state => state.notices.noticesMyAds;\n","export const selectGetAllServices = state => state.services.items;\n\nexport const selectIsLoadingServices = state => state.services.isLoading;\n"],"names":["ServiceItem","styled","ServiceRightSide","ServiceText","AmountForm","DeleteButton","AmountInput","SubmitButton","OrderServicesItem","props","currentService","service","order","useSelector","selectOrderByNumber","dispatch","useDispatch","formik","useFormik","initialValues","amount","onSubmit","values","filteredServices","services","filter","_id","data","updateOrderByNumber","number","orderNumber","name","pricePerMeter","handleSubmit","required","id","value","onChange","handleChange","type","min","price","onClick","serviceId","handleDeleteService","ModaAddServiceToOrder","selectGetAllServices","useEffect","getAllServices","handleExitModal","handleAddService","e","target","currentTarget","Select","variant","style","width","map","MenuItem","category","className","ModalUpdateOrderStatus","status","ModalAddDiscount","discountPercent","TextField","label","OrderCard","useState","isEdit","setEdit","isOpenModalServices","setOpenModalServices","isOpenModalStatus","setOpenModalStatus","isOpenModalDiscount","setOpenModalDiscount","employees","selectEmployees","isLoadingOrder","selectIsLoadingOrders","isLoadingEmployees","selectIsLoadingEmployees","useParams","getAllEmployees","getOrderByNumber","washer","display","alignItems","columnGap","disabled","employee","urgently","clientComment","clientName","clientPhone","serviceObject","orderDate","orderExecutionDate","totalCostOrder","discountedCostOrder","washerPayment","administratorPayment","revenue","state","items","isLoading","selectOrders","orders","orderByNumber"],"sourceRoot":""}